datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(cuid())

  name     String
  email    String      @unique
  username String?     @unique
  bio      String?
  type     AccountType @default(DEFAULT)

  contact      Contact?
  address      Address[]
  password     Password?
  savedPets    SavedPetRecord[]
  organization Organization?
  // notes will be kept in tact until new models and routes have been created
  notes        Note[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Organization {
  id String @id @default(cuid())

  name     String
  email    String @unique
  username String @unique
  bio      String

  pets    Pet[]
  address Address[]
  contact Contact?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Note model will stay in tact til a bit later in development
model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Address {
  id String @id @default(uuid())

  address   String  @db.VarChar(100)
  apartment String? @db.VarChar(25)
  city      String  @db.VarChar(50)
  state     String  @db.VarChar(50)
  zip       String
  country   String  @db.VarChar(100)

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String? @unique

  organization   Organization? @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organizationId String?       @unique
}

model Contact {
  id String @id @default(uuid())

  phones Phone[]

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String? @unique

  organization   Organization? @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  organizationId String?       @unique
}

model Phone {
  id     String @id @default(uuid())
  number String

  contact   Contact @relation(fields: [contactId], references: [id])
  contactId String
}

enum AccountType {
  DEFAULT
  ORGANIZATION
}

model Pet {
  id      String  @id @default(uuid())
  name    String  @db.VarChar(50)
  species Species

  bio         String?
  description String?
  age         Age     @default(UNKNOWN)
  sex         Sex     @default(UNKNOWN)
  size        Size    @default(UNKNOWN)
  coat        Coat    @default(UNKNOWN)
  status      Status  @default(HOLD)

  colors      Colors?
  attributes  Attributes?
  environment Environment?
  tags        TagsOnPets[]
  breeds      BreedsToPets[]
  savedBy     SavedPetRecord[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Species {
  CAT
  DOG
  BIRD
  HORSE
  FISH
  REPTILE
  BARNYARD
}

enum Age {
  YOUNG // UI -> puppy, kitten, ect based on species
  ADULT
  SENIOR
  UNKNOWN
}

enum Size {
  SM
  MD
  LG
  XL
  UNKNOWN
}

enum Coat {
  NONE
  SHORT
  MEDIUM
  LONG
  UNKNOWN
}

enum Sex {
  FEMALE
  MALE
  UNKNOWN
}

enum Status {
  ADOPTABLE
  ADOPTED
  HOLD
}

model Colors {
  id        String  @id @default(cuid())
  primary   String?
  secondary String?
  tertiary  String?

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  petId String @unique
}

model Breed {
  id String @id @default(uuid())

  breed   String
  species Species

  pets BreedsToPets[]
}

model BreedsToPets {
  breed   Breed  @relation(fields: [breedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  breedId String
  pet     Pet    @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId   String

  @@id([breedId, petId])
}

model Attributes {
  id                 String  @id @default(cuid())
  isHouseTrained     Boolean @default(false)
  hasSpecialNeeds    Boolean @default(false)
  hasCurrentShots    Boolean @default(false)
  isSpayedOrNeutered Boolean @default(false)

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  petId String @unique
}

model Tag {
  id      String @id @default(cuid())
  content String

  pets TagsOnPets[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Tags {
  CUTE
  INTELLIGENT
  LARGE
  PLAYFUL
  HAPPY
  AFFECTIONATE
  SILLY
  ENERGETIC
  HIGH_OCTANE
  LAZY
  CALM
  QUIET
}

model TagsOnPets {
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  petId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String

  // tell prisma that we don't want duplicate tag + petId records
  @@id([petId, tagId])
}

model SavedPetRecord {
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String
  pet    Pet    @relation(fields: [petId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  petId  String

  @@id([userId, petId])
}

model Environment {
  id       String   @id @default(cuid())
  children Boolean? @default(false)
  dogs     Boolean? @default(false)
  cats     Boolean? @default(false)

  petId String @unique
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// model Image {
//   id String @id @default(uuid())

//   url       String?
//   file      String?
//   thumbnail String?

//   pets ImagesToPetProfiles[]
// }

// model ImagesToPetProfiles {
//   image        Image      @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   imageId      String
//   petProfile   PetProfile @relation(fields: [petProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
//   petProfileId String

//   @@id([imageId, petProfileId])
// }
